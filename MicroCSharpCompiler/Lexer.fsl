{
module Lexer
open System
open Parser
open Microsoft.FSharp.Text.Lexing

let lexeme lexbuf = LexBuffer<char>.LexemeString lexbuf
}

// These are some regular expression definitions
let name = ['a'-'z' 'A'-'Z' '0'-'9' '.']
let anything = [ 'a'-'z' 'A'-'Z' '0'-'9' '.' '{' '}' '(' ')' ',' ';' '+' ' '] //TODO - better way to defin what can be in a comment!!
let digit = ['0'-'9']
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

rule tokenize = parse
| whitespace	{ tokenize lexbuf }
| newline       { tokenize lexbuf }
//Keywords
| "using"		{ USING }
| "namespace"	{ NAMESPACE  }
| "class"		{ CLASS  }
| "interface"   { INTERFACE }
| "struct"		{ STRUCT }
| "enum"		{ ENUM }
//
| ("public"|"private"|"internal"|"protected") { ACCESSMODIFIER (lexeme lexbuf) }
// TODO Remove ;)
| "null"		{ NULL }
//Noise
| "{"			{ LCURLY }
| "}"			{ RCURLY }
| "("			{ LPAREN }
| ")"			{ RPAREN }
| ";"			{ SEMICOLON }
| ","			{ COMMA }
| "\""			{ QUOTE }
| "="			{ EQUALS }
| "+"			{ ADD } 
| "new"			{ NEW }
| "return"		{ RETURN }
| "//"			{ COMMENT }


| ("true"|"false")								{ BOOL (Boolean.Parse(lexeme lexbuf)) }
| ['-']?digit+									{ INT (Int32.Parse(lexeme lexbuf)) }
| ['-']?digit+('.'digit+)?(['e''E']digit+)?		{ FLOAT (Single.Parse(lexeme lexbuf)) }
| name+											{ NAME (lexeme lexbuf) }
| anything+										{ ANYTHING(lexeme lexbuf) }


// EOF
| eof   { EOF }

