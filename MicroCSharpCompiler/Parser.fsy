%{

open Ast

%}

// The start token becomes a parser function in the compiled code:
%start start

// These are the terminal tokens of the grammar along with the types of
// the data carried by each token:
%token <string> NAME

//Keywords
%token USING
%token NAMESPACE
%token CLASS INTERFACE STRUCT ENUM NEW RETURN
%token <System.Int32> INT 
%token <System.Single> FLOAT
%token <System.Double> DOUBLE
%token <System.Boolean> BOOL 
%token <string> ACCESSMODIFIER STRING
%token <string> ANYTHING

//Language Wrongness
%token NULL

//Language noise
%token LCURLY RCURLY SEMICOLON LPAREN RPAREN COMMA QUOTE EQUALS ADD COMMENT

%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Ast.File > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  In this case the actions 
// produce data using F# data construction terms.
start: FileBodyList { File($1) }

//File Body contents list
FileBodyList:
	|						{ [] }
	| FileBody				{ [$1] }
	| FileBody FileBodyList { $1 :: $2 }

//Legal contents of the file body
FileBody:
	| USING NAME SEMICOLON								{ Using($2) }
    | NAMESPACE	NAME LCURLY NamespaceBodyList RCURLY	{ Namespace($2, $4) }

NamespaceBodyList:
	|									{ [] }
	| NamespaceBody						{ [$1] }
	| NamespaceBody NamespaceBodyList	{ $1 :: $2 }
NamespaceBody:
	//Can probably boil this down and make visibility optional - dont know how yet
	| CLASS NAME LCURLY ClassBodyList RCURLY		{ Class($2, AccessModifier.Internal, $4) }
	| ACCESSMODIFIER CLASS NAME LCURLY ClassBodyList RCURLY		{ Class($3, AstHelpers.toAccessModifier($1), $5) }
	| INTERFACE NAME LCURLY InterfaceBodyList RCURLY	{ Interface($2, AccessModifier.Internal, $4) }
	| ACCESSMODIFIER INTERFACE NAME LCURLY InterfaceBodyList RCURLY	{ Interface($3, AstHelpers.toAccessModifier($1), $5) }
	| STRUCT NAME LCURLY RCURLY		{ Struct($2, AccessModifier.Internal) }
	| ACCESSMODIFIER STRUCT NAME LCURLY RCURLY		{ Struct($3, AstHelpers.toAccessModifier($1)) }
	| ENUM NAME LCURLY EnumBodyList	RCURLY { Enum($2, AccessModifier.Internal, $4) }
	| ACCESSMODIFIER ENUM NAME LCURLY EnumBodyList	RCURLY { Enum($3, AstHelpers.toAccessModifier($1), $5) }

InterfaceBodyList:
	|									{ [] }
	| InterfaceBody						{ [$1] }
	| InterfaceBody InterfaceBodyList	{ $1 :: $2 }

InterfaceBody:
	| NAME NAME LPAREN ParameterBodyList RPAREN SEMICOLON			{ Method($1, $2, $4) } 

ClassBodyList:
	|							{ [] }
	| ClassBody					{ [$1] }
	| ClassBody ClassBodyList	{ $1 :: $2 }

ClassBody:
	| NAME NAME LPAREN ParameterBodyList RPAREN LCURLY ExprList RCURLY		{ ClassBody.Method(AccessModifier.Private, $1, $2, $4, $7) } 

ExprList:
	|					{ [] }
	| Expr				{ [$1] }
	| Expr ExprList		{ $1 :: $2 }

Expr:
	| Expr SEMICOLON					{ Expr($1) }
	| NEW NAME LPAREN ParameterExprList RPAREN { Constructor($2, $4) }
	| NAME LPAREN ParameterExprList RPAREN 	{ Call($1, $3) }
	| INT								{ Int($1) }
	| FLOAT								{ Float($1) }
	| BOOL								{ Bool($1) }
	
	| RETURN Expr						{ Return($2) }
	| NAME NAME EQUALS Expr				{ Var ($1, $2, Some($4)) }
	| NAME NAME							{ Var ($1, $2, None) }
	| Expr ADD Expr						{ Add($1, $3) }
	| STRING							{ String($1) }
	| NAME								{ Ref($1) }
	| Expr EQUALS EQUALS Expr			{ Equals($1, $4) }

EnumBodyList:
	|							{ [] }
	| EnumBody					{ [$1] }
	| EnumBody EnumBodyList		{ $1 :: $2 }

EnumBody:
	| NAME COMMA				{ $1 }
	| NAME						{ $1 }

ParameterExprList:
	|							{ [] }
	| Expr						{ [$1] }
	| Expr ParameterExprList	{ $1 :: $2 }

//ParameterBodyList for defining parameters as type-name pairs
ParameterBodyList:
	|									{ [] }
	| ParameterBody						{ [$1] }
	| ParameterBody ParameterBodyList	{ $1 :: $2 }

ParameterBody:
	| NAME NAME COMMA				{ Parameter($1, $2) }
	| NAME NAME						{ Parameter($1, $2) }